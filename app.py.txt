from flask import Flask, jsonify
from flask_cors import CORS
import psycopg2
import random

app = Flask(__name__)
CORS(app)


conn = psycopg2.connect(
    host="db-bek.c32geugqgvkj.ap-southeast-1.rds.amazonaws.com",
    database="postgres",
    user="adminbek",
    password="adminbek"
)

@app.route("/")
def home():
    return "Welcome to Exam Results API"

@app.route("/results")
def get_results():
    try:
        conn.rollback()
        cur = conn.cursor()
        cur.execute("SELECT * FROM exam_results")
        rows = cur.fetchall()
        cur.close()
        return jsonify(rows)
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/add", methods=["POST"])
def add_data():
    try:
        cur = conn.cursor()
        genders = ["male", "female"]
        groups = ["group A", "group B", "group C", "group D", "group E"]
        educations = ["high school", "some high school", "some college", "associate's degree", "bachelor's degree", "ma>        lunches = ["standard", "free/reduced"]
        preps = ["none", "completed"]
        scores = [random.randint(40, 100) for _ in range(3)]  # math, reading, writing

        query = """
        INSERT INTO exam_results VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """
        cur.execute(query, (
            random.choice(genders),
            random.choice(groups),
            random.choice(educations),
            random.choice(lunches),
            random.choice(preps),
            scores[0],
            scores[1],
            scores[2]
        ))
        conn.commit()
        cur.close()
        return "Random data added!"
    except Exception as e:
 return jsonify({"error": str(e)})

@app.route("/delete", methods=["POST"])
def delete_one():
    cur = conn.cursor()
    try:
        cur.execute("""
            DELETE FROM exam_results
            WHERE ctid IN (
                SELECT ctid FROM exam_results LIMIT 1
            )
            RETURNING *;
        """)
        deleted_row = cur.fetchone()
        conn.commit()
        cur.close()
        if deleted_row:
            return "One row deleted!"
        else:
            return "No rows found."
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/delete_all", methods=["POST"])
def delete_all():
    cur = conn.cursor()
    cur.execute("DELETE FROM exam_results")
    conn.commit()
    cur.close()
    return "All rows deleted!"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
